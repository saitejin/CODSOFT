import tkinter as tk
import math

class ScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Scientific Calculator")
        self.root.geometry("400x600")
        self.root.resizable(False, False)
        self.root.configure(bg="#2c3e50")
        
        self.equation = ""
        
        self.create_widgets()
        
    def create_widgets(self):
        # Result display
        self.label_result = tk.Label(self.root, text="", anchor="e", bg="#34495e", fg="#ecf0f1", font=("Arial", 24, "bold"), padx=10, pady=20)
        self.label_result.grid(row=0, column=0, columnspan=4, sticky="nsew")
        
        # Button layout (Arithmetic + Digits)
        button_texts = [
            ('C', 1, 0, self.clear, "#e74c3c"), ('/', 1, 1, lambda: self.show("/"), "#95a5a6"), ('%', 1, 2, lambda: self.show("%"), "#95a5a6"), ('*', 1, 3, lambda: self.show("*"), "#95a5a6"),
            ('7', 2, 0, lambda: self.show("7"), "#34495e"), ('8', 2, 1, lambda: self.show("8"), "#34495e"), ('9', 2, 2, lambda: self.show("9"), "#34495e"), ('-', 2, 3, lambda: self.show("-"), "#95a5a6"),
            ('4', 3, 0, lambda: self.show("4"), "#34495e"), ('5', 3, 1, lambda: self.show("5"), "#34495e"), ('6', 3, 2, lambda: self.show("6"), "#34495e"), ('+', 3, 3, lambda: self.show("+"), "#95a5a6"),
            ('1', 4, 0, lambda: self.show("1"), "#34495e"), ('2', 4, 1, lambda: self.show("2"), "#34495e"), ('3', 4, 2, lambda: self.show("3"), "#34495e"), ('=', 4, 3, self.calculate, "#27ae60", 2),
            ('0', 5, 0, lambda: self.show("0"), "#34495e", 2), ('.', 5, 2, lambda: self.show("."), "#34495e")
        ]
        
        # Scientific functions
        sci_button_texts = [
            ('sin', 6, 0, lambda: self.show("math.sin("), "#3498db"), ('cos', 6, 1, lambda: self.show("math.cos("), "#3498db"),
            ('tan', 6, 2, lambda: self.show("math.tan("), "#3498db"), ('log', 6, 3, lambda: self.show("math.log("), "#3498db"),
            ('sqrt', 7, 0, lambda: self.show("math.sqrt("), "#9b59b6"), ('^', 7, 1, lambda: self.show("**"), "#9b59b6"),
            ('(', 7, 2, lambda: self.show("("), "#9b59b6"), (')', 7, 3, lambda: self.show(")"), "#9b59b6")
        ]

        # Add arithmetic and digit buttons
        for (text, row, col, command, color, *span) in button_texts:
            width_span = span[0] if span else 1
            btn = tk.Button(self.root, text=text, bg=color, fg="white", font=("Arial", 18, "bold"), command=command)
            btn.grid(row=row, column=col, columnspan=width_span, sticky="nsew", padx=5, pady=5)

        # Add scientific buttons
        for (text, row, col, command, color, *span) in sci_button_texts:
            width_span = span[0] if span else 1
            btn = tk.Button(self.root, text=text, bg=color, fg="white", font=("Arial", 18, "bold"), command=command)
            btn.grid(row=row, column=col, columnspan=width_span, sticky="nsew", padx=5, pady=5)
        
        # Grid configuration for equal button sizes
        for i in range(8):  # Updated to 8 rows to include scientific buttons
            self.root.grid_rowconfigure(i, weight=1)
            if i < 4:
                self.root.grid_columnconfigure(i, weight=1)
    
    def show(self, value):
        self.equation += str(value)
        self.label_result.config(text=self.equation)

    def clear(self):
        self.equation = ""
        self.label_result.config(text=self.equation)

    def calculate(self):
        try:
            result = str(eval(self.equation))
            self.label_result.config(text=result)
            self.equation = result
        except:
            self.label_result.config(text="Error")
            self.equation = ""

if __name__ == "__main__":
    root = tk.Tk()
    app = ScientificCalculator(root)
    root.mainloop()
