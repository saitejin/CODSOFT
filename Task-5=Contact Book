import tkinter as tk
from tkinter import ttk, messagebox, simpledialog

class ContactBookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("700x600")  # Set a specific size for better layout control
        self.root.configure(bg="#000000")  # Set the background color to black

        self.contacts = {}

        # Create and place widgets
        self.create_widgets()

    def create_widgets(self):
        # Title Label
        self.title_label = tk.Label(
            self.root,
            text="Contact Book",
            font=("Segoe UI", 24, "bold"),
            bg="#1e1e1e",  # Darker background for the title
            fg="#FFFFFF",  # White text color for contrast
            padx=10,
            pady=10
        )
        self.title_label.pack(pady=10, fill=tk.X)

        # Frame for Form
        self.form_frame = tk.Frame(self.root, bg="#2e2e2e", padx=20, pady=20)
        self.form_frame.pack(padx=20, pady=20, fill=tk.X)

        # Create Form Labels and Entries
        self.create_form_fields()

        # Buttons
        self.create_buttons()

        # Table for Viewing Contacts
        self.tree = ttk.Treeview(self.root, columns=("name", "phone_number", "email", "address"), show='headings', style='Treeview')
        self.tree.heading("name", text="Name")
        self.tree.heading("phone_number", text="Phone Number")
        self.tree.heading("email", text="Email")
        self.tree.heading("address", text="Address")
        self.tree.pack(padx=20, pady=10, fill=tk.BOTH, expand=True)

        # Customize Treeview Appearance
        style = ttk.Style()
        style.configure("Treeview", background="#333333", foreground="#FFFFFF", fieldbackground="#333333")
        style.configure("Treeview.Heading", background="#444444", foreground="#FFFFFF")

    def create_form_fields(self):
        # Name
        self.name_label = tk.Label(self.form_frame, text="Name:", bg="#2e2e2e", fg="#FFFFFF", font=("Segoe UI", 12))
        self.name_label.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        self.name_entry = tk.Entry(self.form_frame, font=("Segoe UI", 12), bg="#3c3c3c", fg="#FFFFFF")
        self.name_entry.grid(row=0, column=1, padx=5, pady=5, sticky=tk.EW)

        # Phone Number
        self.phone_label = tk.Label(self.form_frame, text="Phone Number:", bg="#2e2e2e", fg="#FFFFFF", font=("Segoe UI", 12))
        self.phone_label.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        self.phone_entry = tk.Entry(self.form_frame, font=("Segoe UI", 12), bg="#3c3c3c", fg="#FFFFFF")
        self.phone_entry.grid(row=1, column=1, padx=5, pady=5, sticky=tk.EW)

        # Email
        self.email_label = tk.Label(self.form_frame, text="Email:", bg="#2e2e2e", fg="#FFFFFF", font=("Segoe UI", 12))
        self.email_label.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        self.email_entry = tk.Entry(self.form_frame, font=("Segoe UI", 12), bg="#3c3c3c", fg="#FFFFFF")
        self.email_entry.grid(row=2, column=1, padx=5, pady=5, sticky=tk.EW)

        # Address
        self.address_label = tk.Label(self.form_frame, text="Address:", bg="#2e2e2e", fg="#FFFFFF", font=("Segoe UI", 12))
        self.address_label.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)
        self.address_entry = tk.Entry(self.form_frame, font=("Segoe UI", 12), bg="#3c3c3c", fg="#FFFFFF")
        self.address_entry.grid(row=3, column=1, padx=5, pady=5, sticky=tk.EW)

    def create_buttons(self):
        button_frame = tk.Frame(self.root, bg="#000000")
        button_frame.pack(padx=20, pady=10)

        # Buttons
        self.add_button = tk.Button(button_frame, text="Add Contact", command=self.add_contact, bg="#4CAF50", fg="white", font=("Segoe UI", 12, "bold"), relief=tk.RAISED, bd=2)
        self.add_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.update_button = tk.Button(button_frame, text="Update Contact", command=self.update_contact, bg="#2196F3", fg="white", font=("Segoe UI", 12, "bold"), relief=tk.RAISED, bd=2)
        self.update_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.delete_button = tk.Button(button_frame, text="Delete Contact", command=self.delete_contact, bg="#f44336", fg="white", font=("Segoe UI", 12, "bold"), relief=tk.RAISED, bd=2)
        self.delete_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.view_button = tk.Button(button_frame, text="View Contacts", command=self.view_contacts, bg="#FF9800", fg="white", font=("Segoe UI", 12, "bold"), relief=tk.RAISED, bd=2)
        self.view_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.quit_button = tk.Button(button_frame, text="Quit", command=self.root.quit, bg="#9E9E9E", fg="white", font=("Segoe UI", 12, "bold"), relief=tk.RAISED, bd=2)
        self.quit_button.pack(side=tk.LEFT, padx=5, pady=5)

    def add_contact(self):
        name = self.name_entry.get()
        phone_number = self.phone_entry.get()
        email = self.email_entry.get()
        address = self.address_entry.get()

        if all([name, phone_number, email, address]):
            if phone_number in self.contacts:
                messagebox.showerror("Error", "Contact already exists.")
            else:
                self.contacts[phone_number] = {'name': name, 'phone_number': phone_number, 'email': email, 'address': address}
                messagebox.showinfo("Success", "Contact added successfully.")
                self.clear_entries()
        else:
            messagebox.showwarning("Warning", "All fields are required.")

    def view_contacts(self):
        for item in self.tree.get_children():
            self.tree.delete(item)

        for contact in self.contacts.values():
            self.tree.insert("", "end", values=(contact['name'], contact['phone_number'], contact['email'], contact['address']))

    def update_contact(self):
        phone_number = simpledialog.askstring("Input", "Enter phone number of the contact to update:")
        if phone_number in self.contacts:
            name = simpledialog.askstring("Input", "Enter new Name (leave blank to keep current):")
            email = simpledialog.askstring("Input", "Enter new Email (leave blank to keep current):")
            address = simpledialog.askstring("Input", "Enter new Address (leave blank to keep current):")

            contact = self.contacts[phone_number]
            if name:
                contact['name'] = name
            if email:
                contact['email'] = email
            if address:
                contact['address'] = address

            messagebox.showinfo("Success", "Contact updated successfully.")
        else:
            messagebox.showerror("Error", "Contact not found.")

    def delete_contact(self):
        phone_number = simpledialog.askstring("Input", "Enter phone number of the contact to delete:")
        if phone_number in self.contacts:
            del self.contacts[phone_number]
            messagebox.showinfo("Success", "Contact deleted successfully.")
            self.view_contacts()  # Refresh contact list view
        else:
            messagebox.showerror("Error", "Contact not found.")

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.address_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()
