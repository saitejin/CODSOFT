import tkinter as tk
from tkinter import font as tkFont
import random

# Function to reset the error messages
def update():                                   
    t1.config(text="")
    complexmsg.config(text="")

# Function to generate a weak password
def weakpassword(l):
    p = "".join(chr(random.choice(range(65, 91))) if random.choice([True, False]) else chr(random.choice(range(97, 123))) for _ in range(l))
    return p                                           

# Function to generate a moderate password
def moderatepassword(l):
    p = "".join(
        chr(random.choice(range(65, 91))) if ran == 1
        else chr(random.choice(range(97, 123))) if ran == 2
        else chr(random.choice(range(48, 58)))
        for ran in (random.randrange(1, 4) for _ in range(l))
    )
    return p                                           

# Function to generate a strong password
def strongpassword(l):
    chars = list(range(33, 48)) + list(range(58, 65)) + list(range(91, 97)) + list(range(123, 127))
    p = "".join(chr(random.choice(chars)) for _ in range(l))
    return p                                           

# Main function to generate the password
def click():
    if not length.get():                          
        t1.config(text="# Empty bar")            
        r.after(2000, update)                      
        return
        
    if length.get().isdigit():                                           
        l = int(length.get())
        if l > 0:  # Allow any positive length
            if complexity.get():                              
                password = ""
                
                if complexity.get() == "weak":                             
                    password = weakpassword(l)
                    
                elif complexity.get() == "moderate":                         
                    password = moderatepassword(l)
                    
                else:
                    password = strongpassword(l)                             
                    
                # Show generated password in a new window
                rr = tk.Toplevel(r)                                         
                rr.geometry("500x150")
                rr.config(bg="#1a1a1a")
                
                label = tk.Label(rr, text=password, bg="#1a1a1a", fg="#c7a600", font=("Helvetica", 18, "bold"))
                label.pack(pady=10)
                
                copy_button = tk.Button(rr, text="Copy", bg="#c7a600", fg="#1a1a1a", font=("Segoe UI", 14), command=lambda: rr.clipboard_append(password))
                copy_button.pack(pady=10)
    
            else:                                                        
                complexmsg.config(text="# Specify the complexity of the password")
                r.after(2000, update)
        else:                                                           
            t1.config(text="# Length should be a positive number")
            r.after(2000, update)
    else:                                                                
        t1.config(text="# Length should be in digits only")
        r.after(2000, update)

# Main application window
r = tk.Tk()
r.title("Password Generator")
r.geometry("500x350")
r.config(bg="#1a1a1a")

# Custom font for the application
custom_font = tkFont.Font(family="Segoe UI", size=14, weight="bold")

# Header Section
heading = tk.Label(r, text="Password Generator", bg="#1a1a1a", fg="#f0f0f0", font=("Segoe UI", 24, "bold"))
heading.pack(pady=20)

# Frame for length input
f1 = tk.Frame(r, bg="#1a1a1a")
length = tk.StringVar()                           

t = tk.Label(f1, text="Password Length:", fg="#f0f0f0", bg="#1a1a1a", font=custom_font)
t.grid(row=0, column=0, padx=10, pady=10)

lengthentry = tk.Entry(f1, textvariable=length, bg="#333333", fg="#f0f0f0", font=("Segoe UI", 14), justify="center", bd=2, relief="solid")
lengthentry.grid(row=0, column=1, padx=10, pady=10)

t1 = tk.Label(f1, text="", font=("Segoe UI", 10), bg="#1a1a1a", fg="#ff6666")
t1.grid(row=1, column=0, columnspan=2)

f1.pack(pady=10)

# Frame for complexity options
f2 = tk.Frame(r, bg="#1a1a1a")
complexity = tk.StringVar()                          
complexity.set(None)

radio1 = tk.Radiobutton(f2, text="Weak", fg="#f0f0f0", bg="#1a1a1a", font=custom_font, variable=complexity, value="weak", selectcolor="#333333", activebackground="#1a1a1a", activeforeground="#f0f0f0")
radio1.grid(row=0, column=0, padx=10, pady=5)

radio2 = tk.Radiobutton(f2, text="Moderate", fg="#f0f0f0", bg="#1a1a1a", font=custom_font, variable=complexity, value="moderate", selectcolor="#333333", activebackground="#1a1a1a", activeforeground="#f0f0f0")
radio2.grid(row=0, column=1, padx=10, pady=5)

radio3 = tk.Radiobutton(f2, text="Strong", fg="#f0f0f0", bg="#1a1a1a", font=custom_font, variable=complexity, value="strong", selectcolor="#333333", activebackground="#1a1a1a", activeforeground="#f0f0f0")
radio3.grid(row=0, column=2, padx=10, pady=5)

f2.pack(pady=10)

complexmsg = tk.Label(r, text="", font=("Segoe UI", 10), bg="#1a1a1a", fg="#ff6666")
complexmsg.pack(pady=5)

# Frame for buttons
f3 = tk.Frame(r, bg="#1a1a1a")

b = tk.Button(f3, text="Generate", bg="#c7a600", fg="#1a1a1a", font=custom_font, command=click, bd=3, relief="solid")
b.grid(row=0, column=0, padx=20, pady=10)

b1 = tk.Button(f3, text="Quit", bg="#e0c300", fg="#1a1a1a", font=custom_font, command=r.quit, bd=3, relief="solid")
b1.grid(row=0, column=1, padx=20, pady=10)

f3.pack(pady=20)

r.mainloop()
